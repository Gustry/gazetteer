# Import feature types from Feature type spreadsheet into 
# ftype_list spreadsheet...
#
# Converts the spreadsheet into an sql file - gazetteer_import_ftype.sql

import xlrd;
import re;
import codecs;

src = xlrd.open_workbook('../data/Feature Type and Classification Summary.xls')
sheet = src.sheet_by_index(0)

sql = codecs.open('gazetteer_import_ftype.sql','w','utf_8')

sql.write('''
--  This script generated by load_ftypes.py.  Do not edit!
--  Based on information from "Feature Type and Classification Summary.xls"
--  Repeated to avoid potential BOM issues 

set search_path=gazetteer_import, gazetteer, public;
set search_path=gazetteer_import, gazetteer, public;
SET client_min_messages=WARNING;


drop table if exists ftype_list;
create table ftype_list
(
     id INT NOT NULL PRIMARY KEY,
     ftype VARCHAR(32),
     fclass VARCHAR(32)
);

drop table if exists ftype_alias;
create table ftype_alias
(
    id INT,
    alias VARCHAR(32)
);

''')

fclass = ''
ftid = 0

for r in range( 1, sheet.nrows ):
    row = sheet.row(r)
    if row[0].ctype == 1:
        fclass = str(row[0].value)
        if fclass.startswith('NB:'):
            break
    if row[1].ctype != 1:
        continue
    ftype = str(row[1].value)
    alias = []
    if row[2].ctype == 1:
        alias = [re.sub(r'\s+\(.*\)','',x.lower()) for x in re.split(r'(?:\s*\,\s*|\s+or\s+)',row[2].value)]
    if ftype.lower() not in alias:
        alias.append(ftype.lower())
    ftid += 1

    sql.write("insert into ftype_list values (%d,'%s','%s');\n" % (ftid,ftype,fclass))
    for a in alias:
        try:
            sql.write("insert into ftype_alias values (%d,'%s');\n" % (ftid, a))
        except:
            print "Failed to load alias: ",unicode(a).encode('ascii','backslashreplace')

sql.write(
'''
-- Now process the imported feature codes to generate system codes

DROP TABLE IF EXISTS tmp_fcode;
CREATE TEMP TABLE tmp_fcode
(
    fc_id SERIAL,
    set_id INT NOT NULL,
    id INT NOT NULL,
    name VARCHAR(100),
    code VARCHAR(4),
    category VARCHAR(4)
);

INSERT INTO tmp_fcode( set_id, id, name, code )
SELECT
   1,
   min(id),
   ftype,
   make_syscode(ftype)
FROM 
    ftype_list
GROUP BY
   ftype,
   make_syscode(ftype);

UPDATE tmp_fcode 
SET category=(
   SELECT make_syscode(fclass) FROM ftype_list WHERE ftype_list.id = tmp_fcode.id);

INSERT INTO tmp_fcode( set_id, id, name, code, category )
SELECT
   2,
   id,
   cpa_type,
   make_syscode('C ' || cpa_type ),
   'CPAT'
FROM
   cpa_type;

INSERT INTO tmp_fcode( set_id, id, name, code, category )
SELECT
   3,
   id,
   undersea_type,
   make_syscode('U ' || undersea_type ),
   'USEA'
FROM
   undersea_type;

DROP TABLE IF EXISTS tmp_fix_code;
CREATE TABLE tmp_fix_code( fc_id INT, code VARCHAR(4));

INSERT INTO tmp_fix_code
SELECT
   fc_id,
   substring(code FROM 1 FOR 3) ||
           ((row_number() OVER (PARTITION BY CODE ORDER BY set_id, id))-1)::VARCHAR
FROM
   tmp_fcode;

DELETE FROM tmp_fix_code WHERE substring(CODE FROM 4 FOR 1) = '0';

UPDATE tmp_fcode
SET code = (SELECT CODE FROM tmp_fix_code f WHERE f.fc_id=tmp_fcode.fc_id)
WHERE fc_id IN (SELECT fc_id FROM tmp_fix_code);

delete from gazetteer.system_code where code_group in ('FTYP','FCLS');


insert into gazetteer.system_code(code_group,code,category,value) values
('FCLS','CPAT',NULL,'Crown Protected Area type'),
('FCLS','USEA',NULL,'Undersea feature type');

insert into gazetteer.system_code(code_group,code,category,value) 
select
   distinct
   'FCLS',
   make_syscode( fclass ),
   NULL,
   'NZ - ' || fclass
FROM 
   ftype_list;

insert into gazetteer.system_code(code_group,code,category,value) 
select
   'FTYP',
   code,
   category,
   name
from tmp_fcode;

DROP TABLE IF EXISTS gazetteer_import.ftype_alias_code;
CREATE TABLE ftype_alias_code
(
    alias VARCHAR(32) NOT NULL PRIMARY KEY,
    ftcode CHAR(4)
);

INSERT INTO ftype_alias_code
SELECT 
  a.alias,
  fc.code
FROM
  (SELECT 
     lower(gaz_plaintext(alias)) as alias, 
     min(id) as id
   FROM
     ftype_alias
   GROUP BY
     lower(gaz_plaintext(alias))
  ) a
  JOIN tmp_fcode fc on fc.id = a.id and fc.set_id=1

 ;

-- Add plurals of aliases

DROP TABLE IF EXISTS tmp_ftype_alias_code;
CREATE TEMP TABLE tmp_ftype_alias_code (LIKE ftype_alias_code);
INSERT INTO tmp_ftype_alias_code SELECT alias || 's', ftcode FROM ftype_alias_code;
DELETE FROM tmp_ftype_alias_code WHERE alias IN (SELECT alias FROM ftype_alias_code);
INSERT INTO ftype_alias_code SELECT * FROM tmp_ftype_alias_code;
DROP TABLE tmp_ftype_alias_code;

-- select * from ftype_alias_code order by alias
''')

sql.close()








